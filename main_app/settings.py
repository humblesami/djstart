"""
Django settings for main_app project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%$07*dgzc+)+m&-1iwwh$%6-o%ukw3dygp^^zw1nj57+2*v^2z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

SITE_ID = 1
import os
import json
from shutil import copyfile
# SESSION_COOKIE_AGE = 3600

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}

config_path = (str(BASE_DIR) + '/config.json')
config_path = config_path.replace('\\/', '\\')
config_path = config_path.replace('//', '/')
if not os.path.exists(config_path):
    temp_path = config_path.replace('config.json', 'install/example.config.json')
    copyfile(temp_path, config_path)

DEBUG = False
LOCALHOST = False
RUN_PORT = 8000
SITE_URL = ''
URL_PREFIX = ''
PATH_PREFIX = ''
DATABASE_ROUTERS = []
with open(config_path, 'r') as site_config:
    config_info = json.load(site_config)
    env_type = config_info.get('env')
    if config_info.get('local'):
        DEBUG = True
        LOCALHOST = True
    if env_type == 'dev':
        DEBUG = True
    ALLOWED_HOSTS = config_info.get('host_names')

    active_conn = config_info.get('active_conn')
    if active_conn:
        DATABASES['default'] = config_info[active_conn]
    if config_info.get('port'):
        RUN_PORT = config_info.get('port')
    conf_site = config_info['server_origin']
    if config_info.get('path_prefix'):
        PATH_PREFIX = config_info['path_prefix']
        conf_site = conf_site + '/' + PATH_PREFIX
    SITE_URL = conf_site


PIP_APPS = [
    "rest_framework", "rest_framework.authtoken",
    "model_clone", "admin_image_preview", "form_navigation"
]
after_apps = []
INSTALLED_APPS = PIP_APPS + ['website'] + INSTALLED_APPS + after_apps
ALLOW_UNICODE_SLUGS = True
MIDDLEWARE = ['website.middleware.General'] + MIDDLEWARE


slashed_path = ''

if PATH_PREFIX:
    slashed_path = '/' + PATH_PREFIX
if not slashed_path.endswith('/'):
        slashed_path += '/'

STATIC_ROOT = os.path.join(BASE_DIR, "static/")
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")

MEDIA_URL = slashed_path + 'media/'
STATIC_URL = slashed_path + 'static/'
base_url = SITE_URL
if base_url.endswith('/'):
    base_url = base_url[1:]
SITE__BASE_URL = base_url + slashed_path
URL_PREFIX = slashed_path
APPEND_SLASH = True

LOGIN_URL = slashed_path + 'admin/login/'
